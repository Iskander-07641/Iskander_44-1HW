# handlers/start.py

from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import re
from database.db import Database

start_router = Router()


class RestourantReview(StatesGroup):
    name = State()
    phone_number = State()
    visit_date = State()
    food_rating = State()
    cleanliness_rating = State()
    extra_comments = State()


@start_router.message(Command("start"))
async def send_welcome(message: types.Message):
    buttons = [
        [types.InlineKeyboardButton(text="–ò–Ω—Å—Ç–∞–≥—Ä–∞–º –ø—Ä–æ—Ñ–∏–ª—å", url="https://instagram.com/geeks.kg"),
         types.InlineKeyboardButton(text="–ù–∞—à —Å–∞–π—Ç", url="https://geeks.kg")],
        [types.InlineKeyboardButton(text="–ù–∞—à –∞–¥—Ä–µ—Å", callback_data="address"),
         types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        [types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback"),
         types.InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about_us")],
        [types.InlineKeyboardButton(text="–ù–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="vacancies")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=keyboard)


@start_router.callback_query(F.data == "about_us")
async def about_us(call: types.CallbackQuery):
    await call.answer("–Ω–∏—á–µ–≥–æü§∑")


@start_router.callback_query(F.data == "vacancies")
async def vacancies(call: types.CallbackQuery):
    await call.answer("–Ω–∏—á–µ–≥–æü§∑")


@start_router.callback_query(F.data == "feedback")
async def feedback(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(RestourantReview.name)
    await call.message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")


@start_router.message(RestourantReview.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RestourantReview.phone_number)
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º?")


@start_router.message(RestourantReview.phone_number)
async def process_phone_or_instagram(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await state.set_state(RestourantReview.visit_date)
    await message.answer("–î–∞—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")


@start_router.message(RestourantReview.visit_date)
async def process_visit_date(message: types.Message, state: FSMContext):
    if re.match(r"\d{2}\.\d{2}\.\d{4}", message.text):
        await state.update_data(visit_date=message.text)
        await state.set_state(RestourantReview.food_rating)
        await message.answer("–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã?", reply_markup=food_rating_keyboard())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–î–î.–ú–ú.–ì–ì–ì–ì).")


@start_router.message(RestourantReview.food_rating)
async def process_food_rating(message: types.Message, state: FSMContext):
    if message.text.isdigit() and 1 <= int(message.text) <= 5:
        await state.update_data(food_rating=int(message.text))
        await state.set_state(RestourantReview.cleanliness_rating)
        await message.answer("–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —á–∏—Å—Ç–æ—Ç—É –∑–∞–≤–µ–¥–µ–Ω–∏—è?", reply_markup=cleanliness_rating_keyboard())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")


@start_router.message(RestourantReview.cleanliness_rating)
async def process_cleanliness_rating(message: types.Message, state: FSMContext):
    if message.text.isdigit() and 1 <= int(message.text) <= 5:
        await state.update_data(cleanliness_rating=int(message.text))
        await state.set_state(RestourantReview.extra_comments)
        await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")


@start_router.message(RestourantReview.extra_comments)
async def process_extra_comments(message: types.Message, state: FSMContext):
    await state.update_data(extra_comments=message.text)
    data = await state.get_data()

    review_summary = (
        f"–í–∞—à –æ—Ç–∑—ã–≤:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω/Instagram: {data['phone_number']}\n"
        f"–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è: {data['visit_date']}\n"
        f"–û—Ü–µ–Ω–∫–∞ –µ–¥—ã: {data['food_rating']}\n"
        f"–û—Ü–µ–Ω–∫–∞ —á–∏—Å—Ç–æ—Ç—ã: {data['cleanliness_rating']}\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['extra_comments']}"
    )

    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, {data['name']}!\n\n{review_summary}")

    db = Database('database/reviews.db')  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    db.add_review(
        name=data['name'],
        phone_number=data['phone_number'],
        visit_date=data['visit_date'],
        food_rating=data['food_rating'],
        cleanliness_rating=data['cleanliness_rating'],
        extra_comments=data['extra_comments']
    )
    db.close()

    await state.clear()


def food_rating_keyboard():
    buttons = [KeyboardButton(text=str(i)) for i in range(1, 6)]
    return ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)


def cleanliness_rating_keyboard():
    buttons = [KeyboardButton(text=str(i)) for i in range(1, 6)]
    return ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)
